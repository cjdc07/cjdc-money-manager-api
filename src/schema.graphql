scalar DateTime

type Query {
  info: String!
  accountList(filter: String, skip: Int, first: Int, orderBy: AccountOrderByInput): AccountList!
  # TODO: filter by what? should this be an object? or default
  transactionList(filter: String, account: ID!, type: TransactionType, skip: Int, first: Int, orderBy: TransactionOrderByInput): TransactionList!
  categoryList: CategoryList!
}

# TODO: Convert to what mongodb is using
enum AccountOrderByInput {
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

# TODO: Convert to what mongodb is using
enum TransactionOrderByInput {
  name_ASC
  name_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

enum TransactionType {
  INCOME
  EXPENSE
  TRANSFER
}

type AccountList {
  accounts: [Account!]!
  count: Int!
  total: Float!
}

type TransactionList {
  transactions: [GroupedTransactions!]!
}

type GroupedTransactions {
  transactions: [Transaction!]!
  count: Int!
  total: Float!
  createdAt: DateTime!
}

type CategoryList {
  categories: [Category!]!
  count: Int!
}

# Will removing ! make return type lenient?
type Mutation {
  createAccount(name: String!, balance: Float!, color: String!): Account!
  updateAccount(id: ID!, name: String!, balance: Float!, color: String!): Account!
  deleteAccount(id: ID!): Account!
  createTransaction(
    account: ID!,
    amount: Float!,
    category: String!,
    description: String!,
    from: String!,
    notes: String,
    to: String!,
    type: TransactionType!,
  ): Transaction!
  updateTransaction(
    id: ID!,
    account: ID!
    amount: Float!,
    category: String!,
    description: String!,
    from: String!,
    notes: String,
    to: String!,
    type: TransactionType!,
  ): Transaction!
  deleteTransaction(id: ID!): Transaction!
  createCategory(value: String!, transaction: TransactionType!): Category!
  signup(email: String!, password: String!, name: String!): AuthPayload!
  login(email: String!, password: String!): AuthPayload!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
}

type Account {
  id: ID!
  name: String!
  balance: Float!
  color: String
  updatedAt: DateTime!
  createdAt: DateTime!
  createdBy: User
}

type Transaction {
  id: ID!
  account: Account!
  amount: Float!
  category: Category!
  createdAt: DateTime!
  createdBy: User
  description: String!
  from: String!
  notes: String
  to: String!
  type: TransactionType!
  updatedAt: DateTime!
}

type Category {
  id: ID!
  value: String!
  transaction: TransactionType!
  updatedAt: DateTime!
  createdAt: DateTime!
  createdBy: User
}
